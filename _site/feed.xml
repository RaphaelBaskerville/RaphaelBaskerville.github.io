<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coder : 1213</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://raphaelbaskerville.com/</link>
    <atom:link href="http://raphaelbaskerville.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 22 Dec 2015 13:11:18 -0800</pubDate>
    <lastBuildDate>Tue, 22 Dec 2015 13:11:18 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Gallery</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/bw_hd_skateboard.jpg&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2015 00:00:00 -0800</pubDate>
        <link>http://raphaelbaskerville.com/skate/2015/12/15/gallery.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/skate/2015/12/15/gallery.html</guid>
        
        
        <category>skate</category>
        
      </item>
    
      <item>
        <title>Promises</title>
        <description>&lt;h2 id=&quot;promises&quot;&gt;Promises&lt;/h2&gt;

&lt;h4 id=&quot;reddit-post-on-promises&quot;&gt;Reddit post on Promises&lt;/h4&gt;

&lt;h4 id=&quot;jbarket-writes-about-the-woes-of-learning-async-programming-promises-and-callbacks&quot;&gt;jbarket writes about the woes of learning async programming promises and callbacks.&lt;/h4&gt;

&lt;p&gt;…You have to structure your code in a completely different manner. It takes getting used to, but promises are the answer. Once you grasp how they work, it’s (in my opinion) the cleanest, simplest way to handle async.
You’ve already used them when they’ve been provided before. You just need to think about when you need to create your own too.&lt;/p&gt;

&lt;p&gt;So, to give a random example, I have an Angular app that does some simple logic and sets a few cookies. The rest of the site depends on that information. When I worked against it locally, the entire app just worked, but the minute it was out in the wild–app living in the client’s browser, calling out to the API–those calls would sporadically end up out of order. Setting a couple of cookies doesn’t take long, but it may take longer than it takes JS to reach down for the next line of code that depends on those cookies.  So, I just threw all of that code in a promise. Now, I can guarantee that the pieces of code that depend on those cookies being set don’t get run until they are set, and I can still allow other code, outside of the promise chain, to continue running in parallel.&lt;/p&gt;

&lt;p&gt;And that’s basically it. You put code other code is dependent on the execution of inside a promise. This may be code you wrote, or AJAX calls or some other third party library. You then chain onto that with .then() and do the work that depends on that promise in there. Inside your .then(), you can even return a new promise, and chain an additional .then() on… all in a row, not nested chaos. Then, you can .catch() at the end and get the exceptions thrown by any of those promises. You can also start up multiple promises and wait for all of them to finish before you run some other code. It’s incredibly powerful.&lt;/p&gt;

&lt;h2 id=&quot;simple-implementation&quot;&gt;Simple Implementation&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;We use new Promise to construct the promise. We give the constructor a factory function which does the actual work. This function is called immediately with two arguments. The first argument fulfills the promise and the second argument rejects the promise. Once the operation has completed, we call the appropriate function.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 08 Dec 2015 00:50:32 -0800</pubDate>
        <link>http://raphaelbaskerville.com/coding/2015/12/08/Promise.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/coding/2015/12/08/Promise.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Reduce: Extend</title>
        <description>&lt;h2 id=&quot;extend-and-defaults&quot;&gt;Extend and Defaults&lt;/h2&gt;

&lt;p&gt;  _.extend takes in an object and an arbitrary number of additional optional objects.  It takes the key/value pairs from the optional objects and adds them to the “master” object, over-writing properties that already exist.  _.defaults does the same thing except doesn’t over-write properties.&lt;/p&gt;

&lt;h2 id=&quot;solved-with-reduce&quot;&gt;Solved with reduce&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propsToAddObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propsToAddObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propsToAddObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propsToAddObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-by-step-pseudo-psuedocode&quot;&gt;Step by step pseudo-psuedocode&lt;/h2&gt;

&lt;p&gt;   Our arguments are an array with our original object and &lt;em&gt;objects-with-properties-we’d-like-to-add&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;    While iterating _.reduce will pass one of the &lt;em&gt;objects-with-properties-we’d-like-to-add&lt;/em&gt; into _.each.  Since we don’t pass a starting point in, acc will be the original object on the first iteration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return _.reduce(arguments, function (acc, objectWithPropsWedLikeToAdd) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;    Iterate through the &lt;em&gt;object-with-properties-we’d-like-to-add&lt;/em&gt;, on each iteration _.each will pass a &lt;em&gt;property-we’d-like-to-add&lt;/em&gt; (a value and it’s key) to the callback.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _.each(objectWithPropsWedLikeToAdd, function (value, key) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;    The callback will either create or overwrite the property on the acc with the key and value of the current &lt;em&gt;property-we’d-like-to-add&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    acc[key] = value;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;    Return the acc object with brand new keys/props. On reduce’s next iteration it will pass the next &lt;em&gt;object-with-properties-we’d-like-to-add&lt;/em&gt; to each, but it will use the new bigger better object to add the key/value pairs to.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  return acc;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;    After we have iterated through all of the &lt;em&gt;objects-with-properties-we’d-like-to-add&lt;/em&gt; reduce returns the accumulation of key/value pairs, which is returned by extend.&lt;/p&gt;

&lt;h3 id=&quot;defaults&quot;&gt;Defaults&lt;/h3&gt;

&lt;p&gt;    The only difference between defaults and extend is that defaults does a check to ensure that a key doesn’t exist before it creates it, which requires passing a slightly modified callback to each.&lt;/p&gt;

&lt;p&gt;_.extend&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _.each(propsToAddObj, function (value, key) {
    acc[key] = value;       // just add key/val
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;_.defaults&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_.each(propsToAddObj, function (value, key) {
    if (!acc[key]) {        // check that key does NOT exist
      acc[key] = value;     // add key/val
    }
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 21 Nov 2015 12:50:32 -0800</pubDate>
        <link>http://raphaelbaskerville.com/coding/2015/11/21/extend.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/coding/2015/11/21/extend.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Reduce&#39;s Uses: Introduction to Reduction</title>
        <description>&lt;blockquote&gt;
  &lt;h3 id=&quot;loves-reduce-so-much-he-wrote-a-blog-about-it&quot;&gt;&lt;em&gt;“Loves reduce so much he wrote a blog about it.”&lt;/em&gt;&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;    The nice thing about reduce is that when no other list-transformer pops out at you as a good choice, you can pretty much always fall back on it.  It’s not the fastest, most efficient answer to most problems, but it’ll get the job done.&lt;/p&gt;

&lt;h3 id=&quot;whats-reduce&quot;&gt;What’s reduce?&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;What isn’t reduce?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reduce-is-an-array-method-native-to-javascript--it-is-also-available-for-use-on-any-object-from-the-great-underscorejs-library&quot;&gt;Reduce is an array method native to JavaScript.  It is also available for use on any object from the great underscorejs library.&lt;/h4&gt;

&lt;p&gt;    It takes a list, a callback function and a starting “total” as arguments, and iterates through each item in the list.  The callback will take the accumulated value (or starting point on the first iteration) and the current value of the list, smashes/dices/seperates/concatinates/desolves/loveconnections them together in some-way and returns this new value.  Then, reduce will take this new value and pass it back into the callback with the next value of the list. This process repeats until every item in the list has been passed into the callback function, resulting in a single value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Reduce is a function that takes a list, an accumulator callback and an &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// optional starting point called accumulation.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Iterate through the list. &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// If no accumulation has been provided&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// use the first value of the list. &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// otherwise &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// redefine accumulation as the result of passing the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// accumulation, current value, its key and the entire list &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// into the accumulator callback.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// after iterating through the list, return the accumulation.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;uses-for-reduce&quot;&gt;Uses for reduce&lt;/h3&gt;

&lt;h4 id=&quot;reduce-takes-many-things-and-turns-them-into-one-thing&quot;&gt;Reduce takes many things and turns them into one thing.&lt;/h4&gt;

&lt;p&gt;   Things you can do with reduce:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding the sum or product of a collection of numbers&lt;/li&gt;
  &lt;li&gt;Making one string from many&lt;/li&gt;
  &lt;li&gt;Building up properties in an object&lt;/li&gt;
  &lt;li&gt;Flattening an array&lt;/li&gt;
  &lt;li&gt;Determining if all or none of the items in a list pass or fail a condition&lt;/li&gt;
  &lt;li&gt;Finding the min or max of a collection of numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-reduce-for-everything&quot;&gt;Use reduce for everything.&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Do you like reduce) ? (Don’t use it) : (Use it);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning higher-order functions is scary.  You are passing functions into other functions, thinking about abstraction, recursion, functional programming and it’s all happening at the same time.&lt;/p&gt;

&lt;p&gt;Each Map and Filter all pass the current value, its key, and the entire list into the callback function on every itieration.  It’s easy to forget that reduce passes the accumulation into the callback function before the value key and list.  If you make this mistake your code wont work as expected and its tricky to debug.  Especially since you can erase reduce and replace it with an each, map or filter, your callback works as expected, because you forgot the acc in the first place.&lt;/p&gt;

&lt;p&gt;For beginers it’s important to force yourself to use reduce until it makes sense.&lt;/p&gt;

&lt;h3 id=&quot;dont-use-reduce-for-everything&quot;&gt;Don’t use reduce for everything&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;you could build a house with nothing but a swiss army knife, but that doesn’t make it a good idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;    Since reduce is such a flexible tool, it’s important to remember that you have other tools as well.  Example: You could use reduce to find all users with a certain email address.  Reduce can do that.  Emails are unique, so there will be only one user with that email. Initially, it sounds like that’s exactly what reduce is for, right?  Taking a list and returning a single value. But, you can use _.first for that.  It’s built for that, and will perform much better than reduce will.  _.first will return as soon as it finds the email you were looking for.  While _.reduce would continue checking every single email address every single time. What if you were dealing with millions of users?&lt;/p&gt;

&lt;p&gt;    Reduce is kind of like a swiss-army-knife because it can do everything. Sometimes though, all you need is a screwdriver and even though swiss-army-knives &lt;strong&gt;do&lt;/strong&gt; have screwdrivers, they suck, so you use a real screwdriver.  The &lt;em&gt;difference&lt;/em&gt; between reduce and swiss-army-knives is that sometimes reduce &lt;strong&gt;is absolutley the best tool&lt;/strong&gt; for the job, where a swiss army knife probably never is.  Reduce is more like a swiss-army-sledgehammer, you could hammer a nail with it, you could probably hammer a screw with it, but it’s made for breaking concrete.  You should always try to find a method that solves your problem directly.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-reduce&quot;&gt;When to use reduce&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;If an array is not the data-type you need, you shouldn’t use a method that returns an array.  Use a sledgehammer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;    Typically, when im dealing with a collection and I need to transform it, I ask, what is the result that I’m looking for?  What do I want to have returned?  If the answer &lt;strong&gt;isn’t&lt;/strong&gt; an array, I immediatley start considering reduce.  E.g. I have a list and I want an object literal, boolean, number or string.  To be clear, reduce &lt;strong&gt;can&lt;/strong&gt; return an array and there are cases that you would use it for that, like reducing/flattening nested arrays into a single flat array.  But if I want something other than an array returned, it’s &lt;strong&gt;even more likely&lt;/strong&gt; that reduce will be useful.&lt;/p&gt;

&lt;p&gt;    Many list transformation methods return an array, and are clearly not ideal if one is looking for a different data type.  We’ve all used map or filter to get a results array of one thing(s) and then referenced the value inside of it with results[0].&lt;/p&gt;

&lt;h3 id=&quot;adding-more-to-reduce-later&quot;&gt;Adding more to reduce later&lt;/h3&gt;
&lt;p&gt;I’ll continue to add to this, as reduce has many uses, some of which I don’t even know yet.  I’m sure this post has plenty of mistakes, bad advice, holes, gaps and malicious assumptions on my part.  Please don’t take anything for granted and go easy on me.  I’m learnd-ing.&lt;/p&gt;

&lt;p&gt;Thanks for reading!  Let me know what you think.  Thanks.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Nov 2015 02:50:32 -0800</pubDate>
        <link>http://raphaelbaskerville.com/coding/2015/11/19/reduce.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/coding/2015/11/19/reduce.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Venice Beach Footage</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/skate3.jpg&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;been-skating-since-the-old-school-was-the-only-school&quot;&gt;Been skating since the old school was the only school…&lt;/h4&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iazhZ9uhPEA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;circa-2004---shot-in-about-an-hour-in-venice-beach--not-the-cleanest-footage-or-tricks-but-posted-it-anyway--thanks-aaron-campbell&quot;&gt;circa 2004 - Shot in about an hour in Venice Beach.  Not the cleanest footage or tricks but posted it anyway.  Thanks Aaron Campbell.&lt;/h4&gt;

</description>
        <pubDate>Tue, 17 Feb 2015 00:00:00 -0800</pubDate>
        <link>http://raphaelbaskerville.com/skate/2015/02/17/Venice-beach-footage.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/skate/2015/02/17/Venice-beach-footage.html</guid>
        
        
        <category>skate</category>
        
      </item>
    
      <item>
        <title>Lohan</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/loloTongue.jpg&quot; class=&quot;fit image lohan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have this fun game going.  I make a face and this little guy tries to copy me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/loloGrouch.jpg&quot; class=&quot;fit image dog&quot; /&gt;
&lt;img src=&quot;/images/loloLaugh.jpg&quot; class=&quot;fit image dog&quot; /&gt;
&lt;img src=&quot;/images/loloRoar.jpg&quot; class=&quot;fit image dog&quot; /&gt;
&lt;img src=&quot;/images/loloSomber.jpg&quot; class=&quot;fit image dog&quot; /&gt;
&lt;img src=&quot;/images/loloSquint.jpg&quot; class=&quot;fit image dog&quot; /&gt;
&lt;img src=&quot;/images/loloStoic.jpg&quot; class=&quot;fit image dog&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Feb 2015 00:00:00 -0800</pubDate>
        <link>http://raphaelbaskerville.com/dogs/2015/02/17/Lohan.html</link>
        <guid isPermaLink="true">http://raphaelbaskerville.com/dogs/2015/02/17/Lohan.html</guid>
        
        
        <category>dogs</category>
        
      </item>
    
  </channel>
</rss>
